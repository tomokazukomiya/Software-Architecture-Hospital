services:
  db:
    build:
      context: .
      dockerfile: ./db.Dockerfile
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_db:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_DB=auth_db 
      - POSTGRES_USER=auth_user
      - POSTGRES_PASSWORD=SoftwareArchitectures2025 
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth_db || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  patient_service:
    build:
      context: .
      dockerfile: services/patient_service/Dockerfile
    ports:
      - "8002:8002"
    environment:
      - PYTHONPATH=/app
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=patient_db 
      - DB_USER=auth_user
      - DB_PASSWORD=SoftwareArchitectures2025 
      - DB_HOST=db
      - AUTH_INTROSPECT_URL=http://auth-service:8000/api/auth/introspect/
      - DB_PORT=5432
      
    command: >
      sh -c "python manage.py migrate &&
             python -m uvicorn patient_app.asgi:application --host 0.0.0.0 --port 8002"
    networks:
      - backend
    depends_on:
      db:
        condition: service_healthy
      auth-service: 
        condition: service_started

  visit_service:
    build:
      context: .
      dockerfile: services/visit_service/Dockerfile
    ports:
      - "8004:8004"
    environment:
      - PYTHONPATH=/app
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=visit_db 
      - DB_USER=auth_user
      - DB_PASSWORD=SoftwareArchitectures2025
      - DB_HOST=db
      - AUTH_INTROSPECT_URL=http://auth-service:8000/api/auth/introspect/
      - DB_PORT=5432
      - PATIENT_SERVICE_URL=http://patient_service:8002/api/
      - STAFF_SERVICE_URL=http://staff_service:8003/api/
    command: >
      sh -c "python manage.py migrate &&
             python -m uvicorn visit_app.asgi:application --host 0.0.0.0 --port 8004"
    networks:
      - backend
    depends_on:
      db:
        condition: service_healthy
      auth-service:
        condition: service_started

  staff_service:
    build:
      context: .
      dockerfile: services/staff_service/Dockerfile
    ports:
      - "8003:8003"
    environment:
      - PYTHONPATH=/app
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=staff_db 
      - DB_USER=auth_user
      - DB_PASSWORD=SoftwareArchitectures2025
      - DB_HOST=db
      - AUTH_INTROSPECT_URL=http://auth-service:8000/api/auth/introspect/
      - DB_PORT=5432
    command: >
      sh -c "python manage.py migrate &&
             python -m uvicorn staff_app.asgi:application --host 0.0.0.0 --port 8003"
    networks:
      - backend
    depends_on:
      db:
        condition: service_healthy
      auth-service:
        condition: service_started

  inventory_service:
    build:
      context: .
      dockerfile: services/inventory_service/Dockerfile
    ports:
      - "8001:8001"
    environment:
      - PYTHONPATH=/app
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=inventory_db 
      - DB_USER=auth_user
      - DB_PASSWORD=SoftwareArchitectures2025
      - DB_HOST=db
      - AUTH_INTROSPECT_URL=http://auth-service:8000/api/auth/introspect/
      - AUTH_SERVICE_URL=http://auth-service:8000/api/auth/ 
      - DB_PORT=5432
    command: >
      sh -c "python manage.py migrate &&
             python -m uvicorn inventory_app.asgi:application --host 0.0.0.0 --port 8001"
    networks:
      - backend
    depends_on:
      db:
        condition: service_healthy
      auth-service:
        condition: service_started

  auth-service:
    build:
      context: .
      dockerfile: services/auth_service/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=auth_db
      - DB_USER=auth_user
      - DB_PASSWORD=SoftwareArchitectures2025 
      - DB_HOST=db
      - DB_PORT=5432
    command: >
      sh -c "python manage.py migrate &&
             python -m uvicorn auth_app.asgi:application --host 0.0.0.0 --port 8000"
    networks:
      - backend
    depends_on:
      db: 
        condition: service_healthy 

  frontend:
    build:
      context: ./frontend
    ports:
      - "3000:3000"
    # --- MODIFICA 1: Aggiungi queste variabili d'ambiente per il reverse proxy ---
    environment:
      # Legge l'URL univoco fornito dal sistema di build (es. ospedale-12.localhost)
      - VIRTUAL_HOST=${VIRTUAL_HOST} 
      # Specifica a nginx-proxy su quale porta interna (del container) deve inoltrare il traffico
      - VIRTUAL_PORT=3000 
    depends_on:
      - auth-service
      - inventory_service
      - staff_service
      - patient_service
      - visit_service
    networks:
      - backend
      # --- MODIFICA 3: Connetti il frontend anche alla rete del proxy ---
      - proxy-net

networks:
  backend:
    driver: bridge
  # --- MODIFICA 2: Definisci la rete del proxy come esterna ---
  proxy-net:
    external:
      # Legge il nome della rete esterna (demo_git_frontend-network) fornito dal sistema di build
      name: ${NGINX_PROXY_NETWORK}

volumes: 
  postgres_data:
