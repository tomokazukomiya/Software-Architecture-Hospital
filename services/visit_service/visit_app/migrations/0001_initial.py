# Generated by Django 4.2.21 on 2025-05-31 10:37

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Admission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admitted_by_id', models.IntegerField(help_text='ID of the admitting staff member')),
                ('admission_time', models.DateTimeField(auto_now_add=True)),
                ('discharge_time', models.DateTimeField(blank=True, help_text='Date/Time of discharge', null=True)),
                ('admitting_diagnosis', models.TextField(help_text='Diagnosis at admission')),
                ('department', models.CharField(help_text='Admitting department', max_length=100)),
                ('notes', models.TextField(blank=True, help_text='Additional notes', null=True)),
            ],
            options={
                'verbose_name': 'Admission',
                'verbose_name_plural': 'Admissions',
                'ordering': ['-admission_time'],
            },
        ),
        migrations.CreateModel(
            name='Bed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient_id', models.IntegerField(blank=True, help_text='ID of the assigned patient', null=True)),
                ('doctor_id', models.IntegerField(blank=True, help_text='ID of the responsible physician', null=True)),
                ('nurse_id', models.IntegerField(blank=True, help_text='ID of the responsible nurse', null=True)),
                ('bed_number', models.CharField(help_text='Bed number/identifier', max_length=10, unique=True)),
                ('status', models.CharField(choices=[('AVAIL', 'Available'), ('OCCUP', 'Occupied'), ('MAINT', 'Maintenance'), ('RESERV', 'Reserved')], default='AVAIL', help_text='Current status of the bed', max_length=6)),
                ('location', models.CharField(help_text='Location/Department', max_length=100)),
                ('is_isolation', models.BooleanField(default=False, help_text='If it is an isolation bed')),
                ('special_equipment', models.TextField(blank=True, help_text='Special equipment available', null=True)),
                ('last_cleaned', models.DateTimeField(auto_now_add=True, help_text='Last cleaning/sanitization')),
            ],
            options={
                'verbose_name': 'Bed',
                'verbose_name_plural': 'Beds',
                'ordering': ['bed_number'],
            },
        ),
        migrations.CreateModel(
            name='Diagnosis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='ICD-10 Code', max_length=20)),
                ('description', models.TextField(help_text='Description of the diagnosis')),
                ('diagnosed_by_id', models.IntegerField(blank=True, help_text='ID of the diagnosing physician', null=True)),
                ('diagnosed_at', models.DateTimeField(auto_now_add=True)),
                ('is_primary', models.BooleanField(default=False, help_text='If it is the primary diagnosis')),
                ('notes', models.TextField(blank=True, help_text='Additional notes', null=True)),
            ],
            options={
                'verbose_name': 'Diagnosis',
                'verbose_name_plural': 'Diagnoses',
                'ordering': ['-diagnosed_at'],
            },
        ),
        migrations.CreateModel(
            name='EmergencyVisit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient_id', models.IntegerField(help_text='Patient ID from the patient service')),
                ('arrival_time', models.DateTimeField(auto_now_add=True)),
                ('triage_level', models.IntegerField(choices=[(1, 'Resuscitation (Immediate)'), (2, 'Emergency (Very Urgent)'), (3, 'Urgent'), (4, 'Less Urgent'), (5, 'Non-Urgent')], default=3, help_text='Urgency level (1=Highest, 5=Lowest)')),
                ('chief_complaint', models.TextField(help_text='Main reason for the visit')),
                ('initial_observation', models.TextField(blank=True, help_text='Initial triage observations', null=True)),
                ('discharge_time', models.DateTimeField(blank=True, help_text='Date/Time of discharge', null=True)),
                ('discharge_diagnosis', models.TextField(blank=True, help_text='Final diagnosis', null=True)),
                ('discharge_instructions', models.TextField(blank=True, help_text='Instructions for the patient', null=True)),
                ('is_admitted', models.BooleanField(default=False, help_text='If the patient was admitted')),
                ('attending_physician_id', models.IntegerField(blank=True, help_text='Attending physician ID from the staff service', null=True)),
                ('triage_nurse_id', models.IntegerField(blank=True, help_text='Triage nurse ID from the staff service', null=True)),
            ],
            options={
                'verbose_name': 'Emergency Visit',
                'verbose_name_plural': 'Emergency Visits',
                'ordering': ['-arrival_time'],
            },
        ),
        migrations.CreateModel(
            name='VitalSign',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recorded_by_id', models.IntegerField(blank=True, help_text='ID of the user who recorded the vital signs', null=True)),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('temperature', models.DecimalField(blank=True, decimal_places=1, help_text='Temperature in Â°C', max_digits=4, null=True)),
                ('heart_rate', models.PositiveIntegerField(blank=True, help_text='Heartbeats per minute', null=True, validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(300)])),
                ('blood_pressure_systolic', models.PositiveIntegerField(blank=True, help_text='Systolic pressure (mmHg)', null=True, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(300)])),
                ('blood_pressure_diastolic', models.PositiveIntegerField(blank=True, help_text='Diastolic pressure (mmHg)', null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(200)])),
                ('respiratory_rate', models.PositiveIntegerField(blank=True, help_text='Respiratory rate (breaths/min)', null=True, validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(60)])),
                ('oxygen_saturation', models.PositiveIntegerField(blank=True, help_text='O2 Saturation %', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('pain_level', models.PositiveIntegerField(blank=True, help_text='Pain level (0-10)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('gcs_score', models.PositiveIntegerField(blank=True, help_text='Glasgow Coma Scale (3-15)', null=True, validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(15)])),
                ('notes', models.TextField(blank=True, help_text='Additional notes', null=True)),
                ('visit', models.ForeignKey(help_text='Associated emergency visit', on_delete=django.db.models.deletion.CASCADE, related_name='vital_signs', to='visit_app.emergencyvisit')),
            ],
            options={
                'verbose_name': 'Vital Sign',
                'verbose_name_plural': 'Vital Signs',
                'ordering': ['-recorded_at'],
            },
        ),
        migrations.CreateModel(
            name='Treatment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('treatment_type', models.CharField(choices=[('MED', 'Medication'), ('PROC', 'Procedure'), ('TEST', 'Diagnostic Test'), ('OTHER', 'Other')], help_text='Type of treatment', max_length=5)),
                ('name', models.CharField(help_text='Name of the treatment', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Detailed description', null=True)),
                ('administered_by_id', models.IntegerField(blank=True, help_text='ID of the staff who administered', null=True)),
                ('administered_at', models.DateTimeField(auto_now_add=True)),
                ('dosage', models.CharField(blank=True, help_text='Dosage (if medication)', max_length=100, null=True)),
                ('outcome', models.TextField(blank=True, help_text='Outcome of the treatment', null=True)),
                ('complications', models.TextField(blank=True, help_text='Any complications', null=True)),
                ('visit', models.ForeignKey(help_text='Associated emergency visit', on_delete=django.db.models.deletion.CASCADE, related_name='treatments', to='visit_app.emergencyvisit')),
            ],
            options={
                'verbose_name': 'Treatment',
                'verbose_name_plural': 'Treatments',
                'ordering': ['-administered_at'],
            },
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('medication', models.CharField(help_text='Name of the medication', max_length=200)),
                ('dosage', models.CharField(help_text='Dosage (e.g., 500mg)', max_length=100)),
                ('frequency', models.CharField(help_text='Frequency (e.g., 3 times a day)', max_length=100)),
                ('duration', models.CharField(help_text='Duration (e.g., 7 days)', max_length=100)),
                ('prescribed_by_id', models.IntegerField(blank=True, help_text='ID of the prescribing physician', null=True)),
                ('prescribed_at', models.DateTimeField(auto_now_add=True)),
                ('instructions', models.TextField(blank=True, help_text='Additional instructions', null=True)),
                ('is_dispensed', models.BooleanField(default=False, help_text='If the medication has been dispensed')),
                ('refills', models.PositiveIntegerField(default=0, help_text='Number of allowed refills')),
                ('visit', models.ForeignKey(help_text='Associated emergency visit', on_delete=django.db.models.deletion.CASCADE, related_name='prescriptions', to='visit_app.emergencyvisit')),
            ],
            options={
                'verbose_name': 'Prescription',
                'verbose_name_plural': 'Prescriptions',
                'ordering': ['-prescribed_at'],
            },
        ),
        migrations.AddIndex(
            model_name='emergencyvisit',
            index=models.Index(fields=['patient_id'], name='visit_app_e_patient_629caa_idx'),
        ),
        migrations.AddIndex(
            model_name='emergencyvisit',
            index=models.Index(fields=['arrival_time'], name='visit_app_e_arrival_2eff61_idx'),
        ),
        migrations.AddIndex(
            model_name='emergencyvisit',
            index=models.Index(fields=['triage_level'], name='visit_app_e_triage__009cfa_idx'),
        ),
        migrations.AddIndex(
            model_name='emergencyvisit',
            index=models.Index(fields=['is_admitted'], name='visit_app_e_is_admi_9d7b2d_idx'),
        ),
        migrations.AddField(
            model_name='diagnosis',
            name='visit',
            field=models.ForeignKey(help_text='Associated emergency visit', on_delete=django.db.models.deletion.CASCADE, related_name='diagnoses', to='visit_app.emergencyvisit'),
        ),
        migrations.AddIndex(
            model_name='bed',
            index=models.Index(fields=['status'], name='visit_app_b_status_c1b8de_idx'),
        ),
        migrations.AddIndex(
            model_name='bed',
            index=models.Index(fields=['location'], name='visit_app_b_locatio_0e5442_idx'),
        ),
        migrations.AddIndex(
            model_name='bed',
            index=models.Index(fields=['is_isolation'], name='visit_app_b_is_isol_7f7675_idx'),
        ),
        migrations.AddField(
            model_name='admission',
            name='bed',
            field=models.ForeignKey(blank=True, help_text='Assigned bed', null=True, on_delete=django.db.models.deletion.SET_NULL, to='visit_app.bed'),
        ),
        migrations.AddField(
            model_name='admission',
            name='visit',
            field=models.OneToOneField(help_text='Associated emergency visit', on_delete=django.db.models.deletion.CASCADE, related_name='admission', to='visit_app.emergencyvisit'),
        ),
        migrations.AddIndex(
            model_name='diagnosis',
            index=models.Index(fields=['code'], name='visit_app_d_code_7eb648_idx'),
        ),
        migrations.AddIndex(
            model_name='admission',
            index=models.Index(fields=['admission_time'], name='visit_app_a_admissi_6f7d58_idx'),
        ),
        migrations.AddIndex(
            model_name='admission',
            index=models.Index(fields=['discharge_time'], name='visit_app_a_dischar_a7fc79_idx'),
        ),
        migrations.AddIndex(
            model_name='admission',
            index=models.Index(fields=['department'], name='visit_app_a_departm_322e93_idx'),
        ),
    ]
